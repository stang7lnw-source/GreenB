<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Greenbike Web App (‡∏à‡∏≥‡∏•‡∏≠‡∏á)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ Sarabun -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Sarabun:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- ‡πÄ‡∏û‡∏¥‡πà‡∏° LeafletJS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>

    <style>
        /* ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Sarabun */
        body {
            font-family: 'Sarabun', sans-serif;
            touch-action: manipulation;
        }
        .page {
            display: none;
            animation: fadeIn 0.5s ease-in-out;
            height: 100%;
        }
        .page.active {
            display: flex;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        #bottom-nav {
            display: none;
        }
        #map, #summary-map {
            height: 100%;
            width: 100%;
            background-color: #e2e8f0;
        }
        .leaflet-control-zoom { display: none; }
        .leaflet-popup-content-wrapper { border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
        .leaflet-popup-content { margin: 12px !important; padding: 0; width: auto !important; }
        .scanner-line {
            position: absolute; left: 0; right: 0; height: 2px;
            background: rgba(255, 255, 255, 0.8);
            box-shadow: 0 0 10px rgba(76, 175, 80, 1);
            animation: scan 2.5s infinite linear;
        }
        @keyframes scan { 0% { top: 0%; } 100% { top: 100%; } }
        
        /* Modal and Notification Styles */
        .modal-backdrop {
            position: fixed; inset: 0; background-color: rgba(0, 0, 0, 0.6);
            display: flex; align-items: center; justify-content: center;
            z-index: 50; opacity: 0; visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }
        .modal-backdrop.active { opacity: 1; visibility: visible; }
        .modal-content {
            background: white; padding: 20px; border-radius: 16px;
            width: 90%; max-width: 400px;
            transform: scale(0.95); transition: transform 0.3s ease;
        }
        .modal-backdrop.active .modal-content { transform: scale(1); }
        .notification {
            position: absolute; top: -100px; left: 50%;
            transform: translateX(-50%);
            transition: top 0.5s ease-in-out;
            z-index: 100;
        }
        .notification.show {
            top: 20px;
        }
    </style>
</head>
<body class="bg-gray-100 md:flex md:items-center md:justify-center md:min-h-screen">

    <!-- ‡∏Å‡∏£‡∏≠‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠‡πÉ‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ -->
    <div class="w-full max-w-sm mx-auto bg-white overflow-hidden flex flex-col relative h-screen md:h-[85vh] md:rounded-2xl md:shadow-2xl">
        
        <!-- Notification container -->
        <div id="notification" class="notification w-11/12 max-w-xs p-3 rounded-xl shadow-lg text-white font-semibold text-center">
            <p id="notification-text"></p>
        </div>

        <main id="app-content" class="flex-grow overflow-y-auto">
            <!-- ‡∏´‡∏ô‡πâ‡∏≤ 0: ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö -->
            <div id="welcome-page" class="page active flex-col h-full items-center justify-center bg-green-600 text-white p-8">
                <span class="text-6xl mb-4">üö≤</span>
                <h1 class="text-4xl font-bold mb-2">Greenbike</h1>
                <p class="text-lg text-green-200 mb-12">‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô</p>
                <button id="start-btn" class="w-full bg-white text-green-600 font-bold py-3 px-4 rounded-lg hover:bg-gray-100 transition duration-300 shadow-lg">
                    ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô üëã
                </button>
            </div>

            <!-- ‡∏´‡∏ô‡πâ‡∏≤ 0.1: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö -->
            <div id="login-page" class="page flex-col h-full justify-center p-8 bg-gray-50">
                <h1 class="text-3xl font-bold text-center mb-8 text-gray-800">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h1>
                <input type="text" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" class="w-full p-3 mb-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500">
                <input type="password" placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" class="w-full p-3 mb-6 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500">
                <button class="login-btn w-full bg-green-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-700 transition duration-300 shadow-lg mb-4">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</button>
                <button id="go-to-register-btn" class="w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg hover:bg-gray-300 transition duration-300">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</button>
            </div>
            
            <!-- ‡∏´‡∏ô‡πâ‡∏≤ 0.2: ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å -->
            <div id="register-page" class="page flex-col h-full justify-center p-8 bg-gray-50">
                <h1 class="text-3xl font-bold text-center mb-8 text-gray-800">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h1>
                <input type="text" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" class="w-full p-3 mb-4 border border-gray-300 rounded-lg">
                <input type="email" placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•" class="w-full p-3 mb-4 border border-gray-300 rounded-lg">
                <input type="password" placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" class="w-full p-3 mb-4 border border-gray-300 rounded-lg">
                <button class="register-btn w-full bg-green-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-700 transition duration-300 shadow-lg mb-4">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</button>
                <button id="go-to-login-btn" class="text-center w-full text-green-600 hover:underline">‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß? ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</button>
            </div>

            <!-- ‡∏´‡∏ô‡πâ‡∏≤ 1: ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà) -->
            <div id="qr-scan-page" class="page flex-col h-full">
                <header class="bg-green-600 text-white p-4 text-center shadow-md z-10"><h1 class="text-xl font-bold">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏∏‡∏ì</h1></header>
                <main class="flex-grow flex flex-col relative">
                    <div id="map" class="flex-grow">
                        <div id="map-loading" class="absolute inset-0 bg-gray-200 flex flex-col items-center justify-center z-20">
                            <svg class="animate-spin h-8 w-8 text-green-600 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                            <p class="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...</p>
                        </div>
                    </div>
                    <button id="fab-scan-btn" class="absolute bottom-24 right-5 bg-green-600 text-white p-4 rounded-full shadow-xl z-10 hover:bg-green-700 transition-transform transform hover:scale-105">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-8 h-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" /><path stroke-linecap="round" stroke-linejoin="round" d="M3.5 9.5h17M3.5 14.5h17" /></svg>
                    </button>
                </main>
            </div>

            <!-- ‡∏´‡∏ô‡πâ‡∏≤ 1.5: ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Scan ‡∏à‡∏£‡∏¥‡∏á -->
            <div id="actual-scan-page" class="page flex-col h-full">
                <header class="bg-green-600 text-white p-4 text-center shadow-md flex items-center justify-between z-10">
                    <button id="back-to-map-btn" class="text-white"><svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg></button>
                    <h1 class="text-xl font-bold">‡∏™‡πÅ‡∏Å‡∏ô QR Code</h1>
                    <div class="w-6"></div>
                </header>
                <main class="flex-grow flex flex-col relative bg-gray-800">
                    <div class="absolute inset-0 flex items-center justify-center"><div class="w-64 h-64 border-4 border-white border-dashed rounded-lg"></div></div>
                    <div class="scanner-line"></div>
                    <div class="absolute bottom-0 left-0 right-0 p-6 text-center bg-black bg-opacity-50">
                        <p class="text-white mb-4">‡πÄ‡∏•‡πá‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà QR code ‡∏ö‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô</p>
                        <button id="simulate-scan-btn" class="bg-white text-gray-800 font-bold py-3 px-6 rounded-lg shadow-lg">‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô</button>
                    </div>
                </main>
            </div>

            <!-- ‡∏´‡∏ô‡πâ‡∏≤ 2: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î -->
            <div id="select-mode-page" class="page flex-col h-full">
                <header class="bg-green-600 text-white p-4 text-center shadow-md"><h1 class="text-xl font-bold">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</h1></header>
                <main class="flex-grow flex flex-col items-center justify-center p-8 bg-gray-50">
                    <p class="text-gray-500">‡∏£‡∏´‡∏±‡∏™‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô:</p>
                    <p id="bike-id-display" class="text-2xl font-bold text-gray-800 mb-6">GB-12345</p>
                    
                    <div class="w-full mb-6 text-center">
                        <button data-mode="normal" class="mode-btn w-full text-lg bg-green-600 text-white font-bold py-4 px-4 rounded-lg hover:bg-green-700 transition duration-300 shadow-lg">üö≤ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏Å‡∏ï‡∏¥</button>
                        <p class="text-xs text-gray-500 mt-2 px-2">‡πÉ‡∏ä‡πâ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏ú‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á<br>‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: 10 ‡∏ö‡∏≤‡∏ó (‡∏ü‡∏£‡∏µ 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏£‡∏Å), ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ 1 ‡∏ö‡∏≤‡∏ó</p>
                    </div>

                    <div class="w-full text-center">
                        <button data-mode="charge" class="mode-btn w-full text-lg bg-yellow-500 text-white font-bold py-4 px-4 rounded-lg hover:bg-yellow-600 transition duration-300 shadow-lg">‚ö°Ô∏è ‡∏õ‡∏±‡πà‡∏ô‡∏ä‡∏≤‡∏£‡πå‡∏à</button>
                        <p class="text-xs text-gray-500 mt-2 px-2">‡∏õ‡∏±‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà ‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏û‡∏¥‡πà‡∏°!<br>‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: 10 ‡∏ö‡∏≤‡∏ó (‡∏ü‡∏£‡∏µ 10 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏£‡∏Å), ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ 1 ‡∏ö‡∏≤‡∏ó</p>
                    </div>
                </main>
            </div>

            <!-- ‡∏´‡∏ô‡πâ‡∏≤ 3: ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á -->
            <div id="trip-page" class="page flex-col h-full">
                <header class="bg-green-600 text-white p-4 text-center shadow-md"><h1 id="trip-header" class="text-xl font-bold">‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á...</h1></header>
                <main class="flex-grow flex flex-col p-6 bg-gray-50">
                    <div class="mb-4 rounded-lg overflow-hidden shadow-md bg-gray-200 h-40 flex items-center justify-center">
                        <p class="text-gray-500">‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô (‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)</p>
                    </div>
                    <div class="flex-grow flex flex-col items-center justify-around">
                        <div class="text-center">
                            <p class="text-gray-500 text-lg">‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ</p>
                            <p id="time-elapsed" class="text-5xl font-bold text-green-600 tabular-nums">00:00</p>
                        </div>
                        <div class="w-full grid grid-cols-3 gap-4 text-center my-4">
                            <div>
                                <p class="text-gray-500">üó∫Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á</p>
                                <p id="distance" class="text-2xl font-semibold text-gray-800">0.00 ‡∏Å‡∏°.</p>
                            </div>
                            <div>
                                <p class="text-gray-500">‚ú® ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</p>
                                <p id="carbon-credit-earned" class="text-2xl font-semibold text-gray-800">0</p>
                            </div>
                            <div>
                                <p class="text-gray-500">üîã ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà</p>
                                <p id="battery-remain" class="text-2xl font-semibold text-gray-800">100%</p>
                            </div>
                        </div>
                        <button id="end-trip-btn" class="w-full bg-red-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-red-700 transition duration-300 shadow-lg text-lg">‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</button>
                    </div>
                </main>
            </div>

            <!-- ‡∏´‡∏ô‡πâ‡∏≤ 4: ‡∏™‡∏£‡∏∏‡∏õ -->
            <div id="summary-page" class="page flex-col h-full">
                <header class="bg-green-600 text-white p-4 text-center shadow-md"><h1 class="text-xl font-bold">‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</h1></header>
                <main class="flex-grow flex flex-col justify-between p-6 bg-gray-50">
                    <div>
                        <div id="summary-map" class="w-full h-40 object-cover rounded-lg overflow-hidden shadow-md mb-4"></div>
                        <div class="bg-white p-4 rounded-lg shadow-md mb-4 border border-gray-200">
                            <p class="text-sm text-gray-500">üÜî ‡∏£‡∏´‡∏±‡∏™‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô: <span id="summary-bike-id" class="font-semibold text-gray-800"></span></p>
                            <p class="text-sm text-gray-500">üó∫Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: <span id="summary-distance" class="font-semibold text-gray-800"></span></p>
                            <p class="text-sm text-gray-500">‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: <span id="summary-duration" class="font-semibold text-gray-800"></span></p>
                        </div>
                        <div class="bg-white p-3 rounded-lg shadow-md border border-gray-200 flex items-center space-x-3 mb-4">
                            <div class="bg-yellow-100 p-2 rounded-full"><span class="text-xl">‚ú®</span></div>
                            <div>
                                <p class="text-sm font-semibold text-gray-800 flex items-center">
                                    Carbon Credit ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
                                    <button id="carbon-info-btn" class="ml-1 text-gray-400 hover:text-gray-600">
                                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path></svg>
                                    </button>
                                </p>
                                <p class="text-xs text-gray-600"><span id="summary-carbon-credit" class="font-bold text-yellow-600">0 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</span> <span id="charge-bonus-text" class="hidden">(‡∏£‡∏ß‡∏°‡πÇ‡∏ö‡∏ô‡∏±‡∏™!)</span></p>
                            </div>
                        </div>
                        <div class="bg-green-100 border border-green-300 p-4 rounded-lg shadow-md text-center">
                            <p class="text-lg font-semibold text-green-800">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°</p>
                            <p id="summary-price" class="text-4xl font-bold text-green-900"></p>
                        </div>
                    </div>
                    <button id="finish-btn" class="w-full bg-green-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-700 transition duration-300 shadow-lg mt-4">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô üéâ</button>
                </main>
            </div>
            
            <!-- ‡∏´‡∏ô‡πâ‡∏≤ 5: ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ -->
            <div id="history-page" class="page flex-col h-full bg-gray-50">
                <header class="bg-green-600 text-white p-4 text-center shadow-md z-10"><h1 class="text-xl font-bold">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h1></header>
                <main class="flex-grow overflow-y-auto p-4">
                    <!-- ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏° -->
                    <div class="bg-white p-4 rounded-xl shadow-md mb-4 border border-gray-200">
                        <h2 class="text-lg font-bold text-gray-800 mb-3">‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>
                        <div class="grid grid-cols-3 gap-2 text-center">
                            <div>
                                <p class="text-2xl font-bold text-green-600" id="total-distance">0</p>
                                <p class="text-xs text-gray-500">‡∏Å‡∏°. ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                            </div>
                            <div>
                                <p class="text-2xl font-bold text-yellow-500" id="total-carbon">0</p>
                                <p class="text-xs text-gray-500">Carbon Credits</p>
                            </div>
                            <div>
                                <p class="text-2xl font-bold text-blue-500" id="total-trips">0</p>
                                <p class="text-xs text-gray-500">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</p>
                            </div>
                        </div>
                    </div>
                    <!-- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏¥‡∏õ -->
                    <h3 class="text-md font-bold text-gray-700 mb-2 mt-6">‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h3>
                    <div id="trip-list-container" class="space-y-3">
                        <!-- Trip items will be injected here -->
                        <p id="no-history-text" class="text-center text-gray-500 mt-8">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</p>
                    </div>
                </main>
            </div>
            
             <!-- ‡∏´‡∏ô‡πâ‡∏≤ Placeholder -->
            <div id="placeholder-page" class="page flex-col h-full items-center justify-center p-8 bg-gray-50">
                <h1 id="placeholder-title" class="text-2xl font-bold text-gray-800"></h1>
                <p class="text-gray-500 mt-2">‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</p>
            </div>
        </main>
        
        <!-- ‡πÅ‡∏ñ‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á -->
        <footer id="bottom-nav" class="w-full bg-white border-t border-gray-200 grid grid-cols-4">
            <button data-page="qr-scan-page" class="nav-btn p-3 flex flex-col items-center justify-center text-green-600"><svg class="w-6 h-6 mb-1" fill="currentColor" viewBox="0 0 20 20"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg><span class="text-xs font-bold">‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</span></button>
            <button data-page="history-page" class="nav-btn p-3 flex flex-col items-center justify-center text-gray-500"><svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span class="text-xs">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥</span></button>
            <button data-page="wallet" class="nav-btn p-3 flex flex-col items-center justify-center text-gray-500"><svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path></svg><span class="text-xs">‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô</span></button>
            <button data-page="profile" class="nav-btn p-3 flex flex-col items-center justify-center text-gray-500"><svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg><span class="text-xs">‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</span></button>
        </footer>
    </div>
    
    <!-- Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Carbon Credit Info -->
    <div id="carbon-modal" class="modal-backdrop">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-3">
                <h3 class="text-lg font-bold text-gray-800">‚ú® Carbon Credit ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?</h3>
                <button id="close-carbon-modal" class="text-gray-400 hover:text-gray-600 text-2xl font-bold">&times;</button>
            </div>
            <p class="text-sm text-gray-600 mb-2">Carbon Credit ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡πä‡∏≤‡∏ã‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡πÑ‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏ã‡∏î‡πå ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå</p>
            <p class="text-sm text-gray-600">‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏Å‡∏°. ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏±‡πà‡∏ô ‡∏à‡∏∞‡∏•‡∏î‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 75 ‡∏Å‡∏£‡∏±‡∏° ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏Ñ‡∏£‡∏±‡∏ö</p>
        </div>
    </div>
    
    <!-- Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Trip Detail -->
    <div id="trip-detail-modal" class="modal-backdrop">
        <div id="trip-detail-content" class="modal-content">
            <!-- Content will be injected by JS -->
        </div>
    </div>

    <script>
        let map = null;
        let userMarker = null;
        let locationWatcher = null;
        let summaryMap = null;

        // --- DOM Elements ---
        const pages = document.querySelectorAll('.page');
        const bottomNav = document.getElementById('bottom-nav');
        const navButtons = document.querySelectorAll('.nav-btn');
        const placeholderTitle = document.getElementById('placeholder-title');
        const carbonModal = document.getElementById('carbon-modal');
        const closeCarbonModalBtn = document.getElementById('close-carbon-modal');
        const carbonInfoBtn = document.getElementById('carbon-info-btn');
        const tripDetailModal = document.getElementById('trip-detail-modal');
        const fabScanBtn = document.getElementById('fab-scan-btn');
        const backToMapBtn = document.getElementById('back-to-map-btn');
        const simulateScanBtn = document.getElementById('simulate-scan-btn');
        const bikeIdDisplay = document.getElementById('bike-id-display');
        const modeButtons = document.querySelectorAll('.mode-btn');
        const tripHeader = document.getElementById('trip-header');
        const timeElapsedEl = document.getElementById('time-elapsed');
        const distanceEl = document.getElementById('distance');
        const carbonCreditEarnedEl = document.getElementById('carbon-credit-earned');
        const batteryRemainEl = document.getElementById('battery-remain');
        const endTripBtn = document.getElementById('end-trip-btn');
        const summaryBikeId = document.getElementById('summary-bike-id');
        const summaryDistance = document.getElementById('summary-distance');
        const summaryDuration = document.getElementById('summary-duration');
        const summaryCarbonCredit = document.getElementById('summary-carbon-credit');
        const chargeBonusText = document.getElementById('charge-bonus-text');
        const summaryPrice = document.getElementById('summary-price');
        const finishBtn = document.getElementById('finish-btn');
        const totalDistanceEl = document.getElementById('total-distance');
        const totalCarbonEl = document.getElementById('total-carbon');
        const totalTripsEl = document.getElementById('total-trips');
        const tripListContainer = document.getElementById('trip-list-container');
        const noHistoryText = document.getElementById('no-history-text');

        let state = {
            bikeId: null, mode: null, distance: 0.0,
            tripInterval: null, startTime: null, elapsedSeconds: 0,
            initialBattery: 100, currentBattery: 100,
            routeCoordinates: []
        };

        // --- Core Functions ---
        
        function showPage(pageId) {
            if (pageId.startsWith('history')) renderHistoryPage();
            
            if (['wallet', 'profile'].includes(pageId)) {
                let title = pageId === 'wallet' ? '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô' : '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå';
                placeholderTitle.textContent = title;
                pages.forEach(p => p.classList.toggle('active', p.id === 'placeholder-page'));
            } else {
                pages.forEach(page => page.classList.toggle('active', page.id === pageId));
            }

            if (pageId === 'qr-scan-page' && map) { setTimeout(() => map.invalidateSize(), 10); }

            navButtons.forEach(btn => {
                const isTargetPage = btn.dataset.page === pageId;
                btn.classList.toggle('text-green-600', isTargetPage);
                btn.classList.toggle('font-bold', isTargetPage);
                btn.classList.toggle('text-gray-500', !isTargetPage);
            });
        }

        function initMap() {
            if (map) { map.invalidateSize(); return; }
            const mapLoading = document.getElementById('map-loading');
            
            const success = (position) => {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;
                mapLoading.style.display = 'none';
                map = L.map('map').setView([lat, lon], 16);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; OpenStreetMap contributors'
                }).addTo(map);

                const userIcon = L.divIcon({
                    html: `<div class="w-6 h-6 bg-blue-500 rounded-full border-2 border-white shadow-md animate-pulse"></div>`,
                    className: '', iconSize: [24, 24], iconAnchor: [12, 12]
                });
                userMarker = L.marker([lat, lon], {icon: userIcon}).addTo(map);
                addBikeMarkers(lat, lon);
            };

            const error = () => {
                mapLoading.querySelector('p').textContent = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ';
                const defaultLat = 18.790; const defaultLon = 98.987; // Chiang Mai
                if (!map) {
                    map = L.map('map').setView([defaultLat, defaultLon], 15);
                     L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '&copy; OpenStreetMap contributors'
                    }).addTo(map);
                }
                addBikeMarkers(defaultLat, defaultLon);
            };
            navigator.geolocation.getCurrentPosition(success, error);
        }
        
        function addBikeMarkers(lat, lon) {
             if (!map) return;
            const bikeIcon = L.divIcon({
                html: `<div class="p-1 bg-green-600 rounded-full shadow-lg border-2 border-white"><svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"></polygon></svg></div>`,
                className: '', iconSize: [32, 32], iconAnchor: [16, 16]
            });
            for (let i = 0; i < 15; i++) {
                const bikeLat = lat + (Math.random() - 0.5) * 0.02;
                const bikeLon = lon + (Math.random() - 0.5) * 0.02;
                const randomId = (i + 1).toString().padStart(3, '0');
                const randomBattery = Math.floor(20 + Math.random() * 81);
                const batteryColor = randomBattery > 60 ? 'text-green-500' : randomBattery > 30 ? 'text-yellow-500' : 'text-red-500';

                const popupContent = `
                    <div class="text-center p-1" style="font-family: 'Sarabun', sans-serif;">
                        <p class="font-bold text-gray-800 text-base mb-1">Greenbike: GB-${randomId}</p>
                        <p class="text-sm text-gray-600 mb-2 flex items-center justify-center">
                            <svg class="w-5 h-5 mr-1 ${batteryColor}" fill="currentColor" viewBox="0 0 20 20"><path d="M5 6a1 1 0 00-1 1v8a1 1 0 001 1h1a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h1a1 1 0 001-1V7a1 1 0 00-1-1H5zM3 7a3 3 0 013-3h8a3 3 0 013 3v8a3 3 0 01-3 3H6a3 3 0 01-3-3V7z"></path></svg>
                            ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà: <span class="font-bold ml-1 ${batteryColor}">${randomBattery}%</span>
                        </p>
                        <button class="w-full bg-green-600 text-white px-3 py-1.5 rounded-lg text-sm font-semibold hover:bg-green-700 transition-colors" 
                                onclick="selectBikeAndScan('GB-${randomId}', ${randomBattery})">
                            ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏™‡πÅ‡∏Å‡∏ô
                        </button>
                    </div>`;
                L.marker([bikeLat, bikeLon], {icon: bikeIcon}).addTo(map).bindPopup(popupContent, { closeButton: false });
            }
        }
        
        function selectBikeAndScan(bikeId, battery) {
            state.bikeId = bikeId;
            state.initialBattery = battery;
            state.currentBattery = battery;
            goToScanPage();
        }

        let notificationTimeout;
        function showNotification(message, type = 'success') {
            const notificationEl = document.getElementById('notification');
            const notificationTextEl = document.getElementById('notification-text');

            if (notificationTimeout) clearTimeout(notificationTimeout);

            notificationTextEl.textContent = message;
            notificationEl.className = 'notification w-11/12 max-w-xs p-3 rounded-xl shadow-lg text-white font-semibold text-center';
            if (type === 'success') {
                notificationEl.classList.add('bg-green-500');
            } else if (type === 'warning') {
                notificationEl.classList.add('bg-yellow-500');
            } else {
                notificationEl.classList.add('bg-blue-500');
            }

            notificationEl.classList.add('show');
            notificationTimeout = setTimeout(() => {
                notificationEl.classList.remove('show');
            }, 4000);
        }

        function trackRealtimePosition(position) {
            const lat = position.coords.latitude;
            const lon = position.coords.longitude;
            const newPoint = [lat, lon];

            if (state.routeCoordinates.length > 0) {
                const lastPoint = state.routeCoordinates[state.routeCoordinates.length - 1];
                state.distance += calculateDistance(lastPoint[0], lastPoint[1], lat, lon);
            }
            state.routeCoordinates.push(newPoint);
        }

        function updateTripUI() {
            state.elapsedSeconds = Math.floor((Date.now() - state.startTime) / 1000);
            
            const freeSeconds = state.mode === 'charge' ? 10 * 60 : 5 * 60;
            if (state.elapsedSeconds === freeSeconds - 15) {
                showNotification('‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏£‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞! ‚è±Ô∏è', 'info');
            }
            
            if (state.mode === 'normal') {
                state.currentBattery = Math.max(0, state.currentBattery - 0.02); // Slower battery drain
            } else {
                state.currentBattery = Math.min(100, state.currentBattery + 0.01); // Slower battery charge
            }

            if (state.currentBattery < 20 && !state.lowBatteryNotified) {
                showNotification('‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß! üîã', 'warning');
                state.lowBatteryNotified = true;
            }

            const carbonCreditRate = state.mode === 'charge' ? 2 : 1; // Double credits for charging
            const carbonCredits = Math.floor(state.distance * 75 * carbonCreditRate);
            
            timeElapsedEl.textContent = formatTime(state.elapsedSeconds);
            distanceEl.textContent = `${state.distance.toFixed(2)} ‡∏Å‡∏°.`;
            carbonCreditEarnedEl.textContent = carbonCredits;
            batteryRemainEl.textContent = `${Math.floor(state.currentBattery)}%`;
        }
        
        function startTrip() {
            state = {...state, startTime: Date.now(), elapsedSeconds: 0, distance: 0.0, lowBatteryNotified: false, routeCoordinates: []};
            if (state.tripInterval) clearInterval(state.tripInterval);
            state.tripInterval = setInterval(updateTripUI, 1000);
            
            if (navigator.geolocation) {
                locationWatcher = navigator.geolocation.watchPosition(trackRealtimePosition, null, { enableHighAccuracy: true });
            }

            bottomNav.style.display = 'none';
            updateTripUI();
        }

        function showSummary() {
            const totalMinutes = Math.max(1, Math.ceil(state.elapsedSeconds / 60));
            
            const freeMinutes = state.mode === 'charge' ? 10 : 5;
            let price = 10.0;
            if (totalMinutes > freeMinutes) {
                price += (totalMinutes - freeMinutes) * 1.0;
            }

            const carbonCreditRate = state.mode === 'charge' ? 2 : 1;
            const carbonCredits = Math.floor(state.distance * 75 * carbonCreditRate);

            if (state.mode === 'charge') {
                chargeBonusText.classList.remove('hidden');
                showNotification('‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÑ‡∏ü‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™ ‚ú®');
            } else {
                chargeBonusText.classList.add('hidden');
            }

            summaryBikeId.textContent = state.bikeId;
            summaryDistance.textContent = `${state.distance.toFixed(2)} ‡∏Å‡∏°.`;
            summaryDuration.textContent = `${totalMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
            summaryPrice.textContent = `${price.toFixed(2)} ‡∏ö‡∏≤‡∏ó`;
            summaryCarbonCredit.textContent = `${carbonCredits} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï`;
            
            saveTripToHistory({ ...state, finalPrice: price, finalCredits: carbonCredits, finalDuration: totalMinutes });
            showPage('summary-page');
            
            // Render summary map
            setTimeout(() => {
                if(summaryMap) summaryMap.remove();
                summaryMap = L.map('summary-map');
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(summaryMap);
                
                if(state.routeCoordinates.length > 1) {
                    const polyline = L.polyline(state.routeCoordinates, {color: '#4ade80', weight: 5}).addTo(summaryMap);
                    summaryMap.fitBounds(polyline.getBounds().pad(0.2));
                     L.marker(state.routeCoordinates[0]).addTo(summaryMap).bindPopup('‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
                    L.marker(state.routeCoordinates[state.routeCoordinates.length - 1]).addTo(summaryMap).bindPopup('‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î');
                }
            }, 100);

            bottomNav.style.display = 'none';
        }
        
        const goToScanPage = () => {
            showPage('actual-scan-page');
            bottomNav.style.display = 'none';
        };

        // --- Event Listeners ---
        document.getElementById('start-btn').addEventListener('click', () => showPage('login-page'));
        document.querySelectorAll('.login-btn, .register-btn').forEach(btn => btn.addEventListener('click', () => {
            showPage('qr-scan-page');
            bottomNav.style.display = 'grid';
            if (!map) initMap();
        }));
        document.getElementById('go-to-register-btn').addEventListener('click', () => showPage('register-page'));
        document.getElementById('go-to-login-btn').addEventListener('click', () => showPage('login-page'));
        
        fabScanBtn.addEventListener('click', goToScanPage);
        backToMapBtn.addEventListener('click', () => { showPage('qr-scan-page'); bottomNav.style.display = 'grid'; });
        
        simulateScanBtn.addEventListener('click', () => {
            if (!state.bikeId) { 
                state.bikeId = `GB-001`;
                state.initialBattery = 100; state.currentBattery = 100;
            }
            bikeIdDisplay.textContent = state.bikeId;
            showPage('select-mode-page');
        });

        modeButtons.forEach(button => {
            button.addEventListener('click', () => {
                state.mode = button.dataset.mode;
                tripHeader.textContent = `‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (${state.mode === 'charge' ? '‚ö°Ô∏è ‡πÇ‡∏´‡∏°‡∏î‡∏ä‡∏≤‡∏£‡πå‡∏à' : 'üö≤ ‡∏õ‡∏Å‡∏ï‡∏¥'})`;
                //animationContainer.innerHTML = state.mode === 'charge' ? chargeAnimationSVG : normalAnimationSVG;
                batteryRemainEl.textContent = `${state.currentBattery}%`;
                showPage('trip-page');
                startTrip();
            });
        });

        endTripBtn.addEventListener('click', () => {
            clearInterval(state.tripInterval);
            state.tripInterval = null;
            if(locationWatcher) navigator.geolocation.clearWatch(locationWatcher);
            showSummary();
        });

        finishBtn.addEventListener('click', () => { showPage('qr-scan-page'); bottomNav.style.display = 'grid'; });
        navButtons.forEach(btn => btn.addEventListener('click', () => showPage(btn.dataset.page)));
        
        // --- LocalStorage History Functions ---
        function getHistory() {
            const history = localStorage.getItem('greenbikeHistory');
            return history ? JSON.parse(history) : { trips: [], totals: { distance: 0, carbon: 0, count: 0 } };
        }

        function saveTripToHistory(tripData) {
            const history = getHistory();
            const tripSummary = {
                id: Date.now(),
                bikeId: tripData.bikeId,
                distance: tripData.distance,
                duration: tripData.finalDuration,
                price: tripData.finalPrice,
                carbonCredits: tripData.finalCredits,
                mode: tripData.mode,
                date: new Date().toISOString()
            };
            history.trips.unshift(tripSummary);
            
            history.totals.distance += tripData.distance;
            history.totals.carbon += tripData.finalCredits;
            history.totals.count += 1;
            
            localStorage.setItem('greenbikeHistory', JSON.stringify(history));
        }

        function renderHistoryPage() {
            const history = getHistory();
            totalDistanceEl.textContent = history.totals.distance.toFixed(2);
            totalCarbonEl.textContent = history.totals.carbon;
            totalTripsEl.textContent = history.totals.count;

            tripListContainer.innerHTML = '';

            if (history.trips.length === 0) {
                noHistoryText.style.display = 'block';
            } else {
                noHistoryText.style.display = 'none';
                history.trips.forEach(trip => {
                    const date = new Date(trip.date);
                    const tripElement = document.createElement('div');
                    tripElement.className = 'bg-white p-3 rounded-lg shadow-sm border border-gray-200 flex justify-between items-center cursor-pointer hover:bg-gray-50';
                    tripElement.innerHTML = `
                        <div>
                            <p class="font-semibold text-gray-800">‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${date.toLocaleDateString('th-TH')}</p>
                            <p class="text-xs text-gray-500">${trip.distance.toFixed(2)} ‡∏Å‡∏°. ‚Ä¢ ${trip.duration} ‡∏ô‡∏≤‡∏ó‡∏µ</p>
                        </div>
                        <div class="text-right">
                            <p class="font-bold text-green-600">${trip.price.toFixed(2)} ‡∏ø</p>
                            <p class="text-xs text-yellow-600">${trip.carbonCredits} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</p>
                        </div>`;
                    tripElement.addEventListener('click', () => showTripDetail(trip));
                    tripListContainer.appendChild(tripElement);
                });
            }
        }
        
        function showTripDetail(trip) {
            const detailContent = document.getElementById('trip-detail-content');
            const date = new Date(trip.date);
            detailContent.innerHTML = `
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-bold text-gray-800">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏£‡∏¥‡∏õ</h3>
                    <button onclick="tripDetailModal.classList.remove('active')" class="text-gray-400 hover:text-gray-600 text-2xl font-bold">&times;</button>
                </div>
                <div class="space-y-2 text-sm">
                    <p class="flex justify-between"><span>üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</span> <span class="font-semibold">${date.toLocaleString('th-TH')}</span></p>
                    <p class="flex justify-between"><span>üÜî ‡∏£‡∏´‡∏±‡∏™‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô:</span> <span class="font-semibold">${trip.bikeId}</span></p>
                    <p class="flex justify-between"><span>üó∫Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á:</span> <span class="font-semibold">${trip.distance.toFixed(2)} ‡∏Å‡∏°.</span></p>
                    <p class="flex justify-between"><span>‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤:</span> <span class="font-semibold">${trip.duration} ‡∏ô‡∏≤‡∏ó‡∏µ</span></p>
                    <p class="flex justify-between"><span>‚ú® ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:</span> <span class="font-semibold text-yellow-600">${trip.carbonCredits}</span></p>
                    <p class="flex justify-between"><span>‡πÇ‡∏´‡∏°‡∏î:</span> <span class="font-semibold">${trip.mode === 'charge' ? '‚ö°Ô∏è ‡∏õ‡∏±‡πà‡∏ô‡∏ä‡∏≤‡∏£‡πå‡∏à' : 'üö≤ ‡∏õ‡∏Å‡∏ï‡∏¥'}</span></p>
                    <hr class="my-2">
                    <p class="flex justify-between text-lg"><span>üí∞ ‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:</span> <span class="font-bold text-green-600">${trip.price.toFixed(2)} ‡∏ö‡∏≤‡∏ó</span></p>
                </div>
            `;
            tripDetailModal.classList.add('active');
        }
        
        // --- Modal Logic ---
        carbonInfoBtn.addEventListener('click', () => carbonModal.classList.add('active'));
        closeCarbonModalBtn.addEventListener('click', () => carbonModal.classList.remove('active'));
        carbonModal.addEventListener('click', (e) => { if (e.target === carbonModal) carbonModal.classList.remove('active'); });
        tripDetailModal.addEventListener('click', (e) => { if (e.target === tripDetailModal) tripDetailModal.classList.remove('active'); });
        
        // --- Utility Functions ---
        function formatTime(seconds) {
            const min = Math.floor(seconds / 60).toString().padStart(2, '0');
            const sec = (seconds % 60).toString().padStart(2, '0');
            return `${min}:${sec}`;
        }

        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Radius of the earth in km
            const dLat = (lat2 - lat1) * (Math.PI / 180);
            const dLon = (lon2 - lon1) * (Math.PI / 180);
            const a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            const d = R * c; // Distance in km
            return d;
        }
        
        document.addEventListener('DOMContentLoaded', () => showPage('welcome-page'));
    </script>
</body>
</html>

